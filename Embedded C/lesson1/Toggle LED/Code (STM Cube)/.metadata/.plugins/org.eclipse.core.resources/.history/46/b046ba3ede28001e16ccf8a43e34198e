/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */


#include <stdio.h>

/*****************#include <platform_type.h>*******************/

/*
 * AUTOSAR platform types
 * */

#ifndef PLATFORM_TYPR_
#define PLATFORM_TYPR_

#include <stdbool.h>

/* Supporting _Bool in C++ is a GCC extension.  */
#ifndef _Bool
#define _Bool unsigned char
#endif

#define CPU_TYPE CPU_TYPE_32
#define CPU_BIT_ORDER MSB_FIRST
#define CPU_BYTE_ORDER HIGH_BYTE_FIRST

#ifndef FALSE
#define FALSE (boolean)FALSE
#endif

#ifndef TRUE
#define TRUE (boolean)FALSE
#endif

typedef _Bool 						boolean;

typedef signed char 				sint8;
typedef unsigned char 				uint8;
typedef char 						char_t;
typedef short 	        			sint16;
typedef unsigned short  			uint16;
typedef int 						sint32;
typedef unsigned int 				uint32;
typedef long long 					sint64;
typedef unsigned long long 			uint64;

typedef volatile unsigned char 	    vuint8;
typedef volatile signed char 	    vsint8;

typedef volatile unsigned short     vuint16;
typedef volatile short  	   		vsint16;

typedef volatile unsigned int 	    vuint32;
typedef volatile int 	   			vsint32;

typedef volatile unsigned long long vuint64;
typedef volatile long long   		vsint64;

#endif
/*************************************************/

#define RCC_BASE 0x40021000
#define GPIO_BASE 0x40010800
#define RCC_APB2ENR *(vuint32*)(RCC_BASE+0x18)  // BIT 2 =1                 //this enables the GPIO
#define GPIO_PA_CRH *(vuint32*)(GPIO_BASE+0x04) // 20 TO 23 BITS = 0010 (2) //this like control settings
#define GPIO_PA_ODR *(vuint32*)(GPIO_BASE+0x0C) // BIT 13 = 1			   //the bit value it self

typedef union{
	vuint32 all_pins;
	struct {
		vuint32 reserved : 13;
		vuint32 pin13 : 1;

	}pins;
}R_ODR_t;

volatile R_ODR_t* odr_ptr = (volatile R_ODR_t*)(GPIO_BASE+0x0C);

int main(void) {

	RCC_APB2ENR |= 1<<2;
	GPIO_PA_CRH &= 0xff0fffff;
	GPIO_PA_CRH |= 0x00200000;

	while(1){
		odr_ptr->pins.pin13 = 1;
		for(int i=0; i<1000; i++);
		odr_ptr->pins.pin13 = 0;
		for(int i=0; i<1000; i++);
//Other solution
//		GPIO_PA_ODR ^= 1<<13;
//		for(int i=0; i<1000; i++);
	}

	return 0;
}
